// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace PlayerState {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Idle = { tag: "Idle" };
  export type Walk = { tag: "Walk" };
  export type Attack1 = { tag: "Attack1" };
  export type Attack2 = { tag: "Attack2" };
  export type Attack3 = { tag: "Attack3" };
  export type Climbing = { tag: "Climbing" };
  export type Damaged = { tag: "Damaged" };
  export type Dead = { tag: "Dead" };
  export type Unknown = { tag: "Unknown" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Idle = { tag: "Idle" };
  export const Walk = { tag: "Walk" };
  export const Attack1 = { tag: "Attack1" };
  export const Attack2 = { tag: "Attack2" };
  export const Attack3 = { tag: "Attack3" };
  export const Climbing = { tag: "Climbing" };
  export const Damaged = { tag: "Damaged" };
  export const Dead = { tag: "Dead" };
  export const Unknown = { tag: "Unknown" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Idle", AlgebraicType.createProductType([])),
      new SumTypeVariant("Walk", AlgebraicType.createProductType([])),
      new SumTypeVariant("Attack1", AlgebraicType.createProductType([])),
      new SumTypeVariant("Attack2", AlgebraicType.createProductType([])),
      new SumTypeVariant("Attack3", AlgebraicType.createProductType([])),
      new SumTypeVariant("Climbing", AlgebraicType.createProductType([])),
      new SumTypeVariant("Damaged", AlgebraicType.createProductType([])),
      new SumTypeVariant("Dead", AlgebraicType.createProductType([])),
      new SumTypeVariant("Unknown", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: PlayerState): void {
      PlayerState.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): PlayerState {
      return PlayerState.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `PlayerState`.
export type PlayerState = PlayerState.Idle | PlayerState.Walk | PlayerState.Attack1 | PlayerState.Attack2 | PlayerState.Attack3 | PlayerState.Climbing | PlayerState.Damaged | PlayerState.Dead | PlayerState.Unknown;

export default PlayerState;

