// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CleanupInactivePlayers } from "./cleanup_inactive_players_reducer.ts";
export { CleanupInactivePlayers };
import { Connect } from "./connect_reducer.ts";
export { Connect };
import { Debug } from "./debug_reducer.ts";
export { Debug };
import { Disconnect } from "./disconnect_reducer.ts";
export { Disconnect };
import { InitializeEnemyRoutes } from "./initialize_enemy_routes_reducer.ts";
export { InitializeEnemyRoutes };
import { SpawnAllEnemies } from "./spawn_all_enemies_reducer.ts";
export { SpawnAllEnemies };
import { UpdatePlayerPosition } from "./update_player_position_reducer.ts";
export { UpdatePlayerPosition };
import { UpdatePlayerState } from "./update_player_state_reducer.ts";
export { UpdatePlayerState };

// Import and reexport all table handle types
import { EnemyTableHandle } from "./enemy_table.ts";
export { EnemyTableHandle };
import { EnemyRouteTableHandle } from "./enemy_route_table.ts";
export { EnemyRouteTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };

// Import and reexport all types
import { DbRect } from "./db_rect_type.ts";
export { DbRect };
import { DbVector2 } from "./db_vector_2_type.ts";
export { DbVector2 };
import { Enemy } from "./enemy_type.ts";
export { Enemy };
import { EnemyRoute } from "./enemy_route_type.ts";
export { EnemyRoute };
import { FacingDirection } from "./facing_direction_type.ts";
export { FacingDirection };
import { Player } from "./player_type.ts";
export { Player };
import { PlayerState } from "./player_state_type.ts";
export { PlayerState };

const REMOTE_MODULE = {
  tables: {
    Enemy: {
      tableName: "Enemy",
      rowType: Enemy.getTypeScriptAlgebraicType(),
      primaryKey: "enemyId",
      primaryKeyInfo: {
        colName: "enemyId",
        colType: Enemy.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    EnemyRoute: {
      tableName: "EnemyRoute",
      rowType: EnemyRoute.getTypeScriptAlgebraicType(),
      primaryKey: "routeId",
      primaryKeyInfo: {
        colName: "routeId",
        colType: EnemyRoute.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    Player: {
      tableName: "Player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    CleanupInactivePlayers: {
      reducerName: "CleanupInactivePlayers",
      argsType: CleanupInactivePlayers.getTypeScriptAlgebraicType(),
    },
    Connect: {
      reducerName: "Connect",
      argsType: Connect.getTypeScriptAlgebraicType(),
    },
    Debug: {
      reducerName: "Debug",
      argsType: Debug.getTypeScriptAlgebraicType(),
    },
    Disconnect: {
      reducerName: "Disconnect",
      argsType: Disconnect.getTypeScriptAlgebraicType(),
    },
    InitializeEnemyRoutes: {
      reducerName: "InitializeEnemyRoutes",
      argsType: InitializeEnemyRoutes.getTypeScriptAlgebraicType(),
    },
    SpawnAllEnemies: {
      reducerName: "SpawnAllEnemies",
      argsType: SpawnAllEnemies.getTypeScriptAlgebraicType(),
    },
    UpdatePlayerPosition: {
      reducerName: "UpdatePlayerPosition",
      argsType: UpdatePlayerPosition.getTypeScriptAlgebraicType(),
    },
    UpdatePlayerState: {
      reducerName: "UpdatePlayerState",
      argsType: UpdatePlayerState.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.2.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CleanupInactivePlayers", args: CleanupInactivePlayers }
| { name: "Connect", args: Connect }
| { name: "Debug", args: Debug }
| { name: "Disconnect", args: Disconnect }
| { name: "InitializeEnemyRoutes", args: InitializeEnemyRoutes }
| { name: "SpawnAllEnemies", args: SpawnAllEnemies }
| { name: "UpdatePlayerPosition", args: UpdatePlayerPosition }
| { name: "UpdatePlayerState", args: UpdatePlayerState }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  cleanupInactivePlayers() {
    this.connection.callReducer("CleanupInactivePlayers", new Uint8Array(0), this.setCallReducerFlags.cleanupInactivePlayersFlags);
  }

  onCleanupInactivePlayers(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("CleanupInactivePlayers", callback);
  }

  removeOnCleanupInactivePlayers(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("CleanupInactivePlayers", callback);
  }

  onConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("Connect", callback);
  }

  removeOnConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("Connect", callback);
  }

  debug() {
    this.connection.callReducer("Debug", new Uint8Array(0), this.setCallReducerFlags.debugFlags);
  }

  onDebug(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("Debug", callback);
  }

  removeOnDebug(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("Debug", callback);
  }

  onDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("Disconnect", callback);
  }

  removeOnDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("Disconnect", callback);
  }

  initializeEnemyRoutes(tilemapJson: string) {
    const __args = { tilemapJson };
    let __writer = new BinaryWriter(1024);
    InitializeEnemyRoutes.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializeEnemyRoutes", __argsBuffer, this.setCallReducerFlags.initializeEnemyRoutesFlags);
  }

  onInitializeEnemyRoutes(callback: (ctx: ReducerEventContext, tilemapJson: string) => void) {
    this.connection.onReducer("InitializeEnemyRoutes", callback);
  }

  removeOnInitializeEnemyRoutes(callback: (ctx: ReducerEventContext, tilemapJson: string) => void) {
    this.connection.offReducer("InitializeEnemyRoutes", callback);
  }

  spawnAllEnemies() {
    this.connection.callReducer("SpawnAllEnemies", new Uint8Array(0), this.setCallReducerFlags.spawnAllEnemiesFlags);
  }

  onSpawnAllEnemies(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("SpawnAllEnemies", callback);
  }

  removeOnSpawnAllEnemies(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("SpawnAllEnemies", callback);
  }

  updatePlayerPosition(x: number, y: number, facing: FacingDirection) {
    const __args = { x, y, facing };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerPosition.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdatePlayerPosition", __argsBuffer, this.setCallReducerFlags.updatePlayerPositionFlags);
  }

  onUpdatePlayerPosition(callback: (ctx: ReducerEventContext, x: number, y: number, facing: FacingDirection) => void) {
    this.connection.onReducer("UpdatePlayerPosition", callback);
  }

  removeOnUpdatePlayerPosition(callback: (ctx: ReducerEventContext, x: number, y: number, facing: FacingDirection) => void) {
    this.connection.offReducer("UpdatePlayerPosition", callback);
  }

  updatePlayerState(newState: PlayerState) {
    const __args = { newState };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdatePlayerState", __argsBuffer, this.setCallReducerFlags.updatePlayerStateFlags);
  }

  onUpdatePlayerState(callback: (ctx: ReducerEventContext, newState: PlayerState) => void) {
    this.connection.onReducer("UpdatePlayerState", callback);
  }

  removeOnUpdatePlayerState(callback: (ctx: ReducerEventContext, newState: PlayerState) => void) {
    this.connection.offReducer("UpdatePlayerState", callback);
  }

}

export class SetReducerFlags {
  cleanupInactivePlayersFlags: CallReducerFlags = 'FullUpdate';
  cleanupInactivePlayers(flags: CallReducerFlags) {
    this.cleanupInactivePlayersFlags = flags;
  }

  debugFlags: CallReducerFlags = 'FullUpdate';
  debug(flags: CallReducerFlags) {
    this.debugFlags = flags;
  }

  initializeEnemyRoutesFlags: CallReducerFlags = 'FullUpdate';
  initializeEnemyRoutes(flags: CallReducerFlags) {
    this.initializeEnemyRoutesFlags = flags;
  }

  spawnAllEnemiesFlags: CallReducerFlags = 'FullUpdate';
  spawnAllEnemies(flags: CallReducerFlags) {
    this.spawnAllEnemiesFlags = flags;
  }

  updatePlayerPositionFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerPosition(flags: CallReducerFlags) {
    this.updatePlayerPositionFlags = flags;
  }

  updatePlayerStateFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerState(flags: CallReducerFlags) {
    this.updatePlayerStateFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get enemy(): EnemyTableHandle {
    return new EnemyTableHandle(this.connection.clientCache.getOrCreateTable<Enemy>(REMOTE_MODULE.tables.Enemy));
  }

  get enemyRoute(): EnemyRouteTableHandle {
    return new EnemyRouteTableHandle(this.connection.clientCache.getOrCreateTable<EnemyRoute>(REMOTE_MODULE.tables.EnemyRoute));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.Player));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
