// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AcceptPartyInvite } from "./accept_party_invite_reducer.ts";
export { AcceptPartyInvite };
import { BroadcastMessage } from "./broadcast_message_reducer.ts";
export { BroadcastMessage };
import { ChangeJob } from "./change_job_reducer.ts";
export { ChangeJob };
import { CheckCombatTimeouts } from "./check_combat_timeouts_reducer.ts";
export { CheckCombatTimeouts };
import { CleanupDeadBodies } from "./cleanup_dead_bodies_reducer.ts";
export { CleanupDeadBodies };
import { CleanupExpiredPartyInvites } from "./cleanup_expired_party_invites_reducer.ts";
export { CleanupExpiredPartyInvites };
import { CleanupInactivePlayers } from "./cleanup_inactive_players_reducer.ts";
export { CleanupInactivePlayers };
import { CleanupOldBroadcasts } from "./cleanup_old_broadcasts_reducer.ts";
export { CleanupOldBroadcasts };
import { CleanupOldMessages } from "./cleanup_old_messages_reducer.ts";
export { CleanupOldMessages };
import { ClearAllJobData } from "./clear_all_job_data_reducer.ts";
export { ClearAllJobData };
import { Connect } from "./connect_reducer.ts";
export { Connect };
import { CreateParty } from "./create_party_reducer.ts";
export { CreateParty };
import { DamageEnemy } from "./damage_enemy_reducer.ts";
export { DamageEnemy };
import { Debug } from "./debug_reducer.ts";
export { Debug };
import { Disconnect } from "./disconnect_reducer.ts";
export { Disconnect };
import { HealPartyMembers } from "./heal_party_members_reducer.ts";
export { HealPartyMembers };
import { InitializeBossRoutes } from "./initialize_boss_routes_reducer.ts";
export { InitializeBossRoutes };
import { InitializeEnemyRoutes } from "./initialize_enemy_routes_reducer.ts";
export { InitializeEnemyRoutes };
import { InitializeJob } from "./initialize_job_reducer.ts";
export { InitializeJob };
import { InitializeJobAttack } from "./initialize_job_attack_reducer.ts";
export { InitializeJobAttack };
import { InitializeJobPassive } from "./initialize_job_passive_reducer.ts";
export { InitializeJobPassive };
import { InitializeTeleports } from "./initialize_teleports_reducer.ts";
export { InitializeTeleports };
import { InstakillPlayer } from "./instakill_player_reducer.ts";
export { InstakillPlayer };
import { InviteToParty } from "./invite_to_party_reducer.ts";
export { InviteToParty };
import { LeaveParty } from "./leave_party_reducer.ts";
export { LeaveParty };
import { PlayerTakeDamage } from "./player_take_damage_reducer.ts";
export { PlayerTakeDamage };
import { PopulateBoss } from "./populate_boss_reducer.ts";
export { PopulateBoss };
import { PopulateBossTriggers } from "./populate_boss_triggers_reducer.ts";
export { PopulateBossTriggers };
import { PopulateEnemy } from "./populate_enemy_reducer.ts";
export { PopulateEnemy };
import { PopulatePlayerLevel } from "./populate_player_level_reducer.ts";
export { PopulatePlayerLevel };
import { RecoverFromDamage } from "./recover_from_damage_reducer.ts";
export { RecoverFromDamage };
import { RemoveFromParty } from "./remove_from_party_reducer.ts";
export { RemoveFromParty };
import { RespawnPlayer } from "./respawn_player_reducer.ts";
export { RespawnPlayer };
import { SendPlayerMessage } from "./send_player_message_reducer.ts";
export { SendPlayerMessage };
import { SetName } from "./set_name_reducer.ts";
export { SetName };
import { SpawnAllEnemies } from "./spawn_all_enemies_reducer.ts";
export { SpawnAllEnemies };
import { SpawnBoss } from "./spawn_boss_reducer.ts";
export { SpawnBoss };
import { SpawnMissingEnemies } from "./spawn_missing_enemies_reducer.ts";
export { SpawnMissingEnemies };
import { TeleportPlayer } from "./teleport_player_reducer.ts";
export { TeleportPlayer };
import { UpdateBossActions } from "./update_boss_actions_reducer.ts";
export { UpdateBossActions };
import { UpdateEnemyPatrol } from "./update_enemy_patrol_reducer.ts";
export { UpdateEnemyPatrol };
import { UpdateLeaderboard } from "./update_leaderboard_reducer.ts";
export { UpdateLeaderboard };
import { UpdatePartyName } from "./update_party_name_reducer.ts";
export { UpdatePartyName };
import { UpdatePlayerPosition } from "./update_player_position_reducer.ts";
export { UpdatePlayerPosition };
import { UpdatePlayerState } from "./update_player_state_reducer.ts";
export { UpdatePlayerState };
import { UpdatePlayerTyping } from "./update_player_typing_reducer.ts";
export { UpdatePlayerTyping };

// Import and reexport all table handle types
import { BossTableHandle } from "./boss_table.ts";
export { BossTableHandle };
import { BossAttackTableHandle } from "./boss_attack_table.ts";
export { BossAttackTableHandle };
import { BossAttackStateTableHandle } from "./boss_attack_state_table.ts";
export { BossAttackStateTableHandle };
import { BossRouteTableHandle } from "./boss_route_table.ts";
export { BossRouteTableHandle };
import { BossTriggerTableHandle } from "./boss_trigger_table.ts";
export { BossTriggerTableHandle };
import { BroadcastTableHandle } from "./broadcast_table.ts";
export { BroadcastTableHandle };
import { EnemyTableHandle } from "./enemy_table.ts";
export { EnemyTableHandle };
import { EnemyDamageEventTableHandle } from "./enemy_damage_event_table.ts";
export { EnemyDamageEventTableHandle };
import { JobTableHandle } from "./job_table.ts";
export { JobTableHandle };
import { JobAttackTableHandle } from "./job_attack_table.ts";
export { JobAttackTableHandle };
import { JobPassiveTableHandle } from "./job_passive_table.ts";
export { JobPassiveTableHandle };
import { LeaderboardTableHandle } from "./leaderboard_table.ts";
export { LeaderboardTableHandle };
import { PartyTableHandle } from "./party_table.ts";
export { PartyTableHandle };
import { PartyInviteTableHandle } from "./party_invite_table.ts";
export { PartyInviteTableHandle };
import { PartyMemberTableHandle } from "./party_member_table.ts";
export { PartyMemberTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { PlayerDamageEventTableHandle } from "./player_damage_event_table.ts";
export { PlayerDamageEventTableHandle };
import { PlayerHealEventTableHandle } from "./player_heal_event_table.ts";
export { PlayerHealEventTableHandle };
import { PlayerJobTableHandle } from "./player_job_table.ts";
export { PlayerJobTableHandle };
import { PlayerLevelTableHandle } from "./player_level_table.ts";
export { PlayerLevelTableHandle };
import { PlayerMessageTableHandle } from "./player_message_table.ts";
export { PlayerMessageTableHandle };
import { PlayerTeleportTableHandle } from "./player_teleport_table.ts";
export { PlayerTeleportTableHandle };
import { SpawnTableHandle } from "./spawn_table.ts";
export { SpawnTableHandle };
import { SpawnRouteTableHandle } from "./spawn_route_table.ts";
export { SpawnRouteTableHandle };
import { TeleportTableHandle } from "./teleport_table.ts";
export { TeleportTableHandle };
import { BossActionTimerTableHandle } from "./boss_action_timer_table.ts";
export { BossActionTimerTableHandle };
import { BroadcastCleanupTimerTableHandle } from "./broadcast_cleanup_timer_table.ts";
export { BroadcastCleanupTimerTableHandle };
import { CleanupDeadBodiesTimerTableHandle } from "./cleanup_dead_bodies_timer_table.ts";
export { CleanupDeadBodiesTimerTableHandle };
import { CombatTimeoutTimerTableHandle } from "./combat_timeout_timer_table.ts";
export { CombatTimeoutTimerTableHandle };
import { EnemyPatrolTimerTableHandle } from "./enemy_patrol_timer_table.ts";
export { EnemyPatrolTimerTableHandle };
import { LeaderboardUpdateTimerTableHandle } from "./leaderboard_update_timer_table.ts";
export { LeaderboardUpdateTimerTableHandle };
import { MessageCleanupTimerTableHandle } from "./message_cleanup_timer_table.ts";
export { MessageCleanupTimerTableHandle };
import { PartyInviteCleanupTimerTableHandle } from "./party_invite_cleanup_timer_table.ts";
export { PartyInviteCleanupTimerTableHandle };
import { SpawnEnemiesTimerTableHandle } from "./spawn_enemies_timer_table.ts";
export { SpawnEnemiesTimerTableHandle };

// Import and reexport all types
import { AiBehavior } from "./ai_behavior_type.ts";
export { AiBehavior };
import { AttackType } from "./attack_type_type.ts";
export { AttackType };
import { Boss } from "./boss_type.ts";
export { Boss };
import { BossActionTimer } from "./boss_action_timer_type.ts";
export { BossActionTimer };
import { BossAttack } from "./boss_attack_type.ts";
export { BossAttack };
import { BossAttackState } from "./boss_attack_state_type.ts";
export { BossAttackState };
import { BossRoute } from "./boss_route_type.ts";
export { BossRoute };
import { BossTrigger } from "./boss_trigger_type.ts";
export { BossTrigger };
import { Broadcast } from "./broadcast_type.ts";
export { Broadcast };
import { BroadcastCleanupTimer } from "./broadcast_cleanup_timer_type.ts";
export { BroadcastCleanupTimer };
import { CleanupDeadBodiesTimer } from "./cleanup_dead_bodies_timer_type.ts";
export { CleanupDeadBodiesTimer };
import { CombatTimeoutTimer } from "./combat_timeout_timer_type.ts";
export { CombatTimeoutTimer };
import { DamageType } from "./damage_type_type.ts";
export { DamageType };
import { DbRect } from "./db_rect_type.ts";
export { DbRect };
import { DbVector2 } from "./db_vector_2_type.ts";
export { DbVector2 };
import { Enemy } from "./enemy_type.ts";
export { Enemy };
import { EnemyDamageEvent } from "./enemy_damage_event_type.ts";
export { EnemyDamageEvent };
import { EnemyPatrolTimer } from "./enemy_patrol_timer_type.ts";
export { EnemyPatrolTimer };
import { EnemyType } from "./enemy_type_type.ts";
export { EnemyType };
import { FacingDirection } from "./facing_direction_type.ts";
export { FacingDirection };
import { Job } from "./job_type.ts";
export { Job };
import { JobAttack } from "./job_attack_type.ts";
export { JobAttack };
import { JobPassive } from "./job_passive_type.ts";
export { JobPassive };
import { Leaderboard } from "./leaderboard_type.ts";
export { Leaderboard };
import { LeaderboardUpdateTimer } from "./leaderboard_update_timer_type.ts";
export { LeaderboardUpdateTimer };
import { MessageCleanupTimer } from "./message_cleanup_timer_type.ts";
export { MessageCleanupTimer };
import { MessageType } from "./message_type_type.ts";
export { MessageType };
import { Party } from "./party_type.ts";
export { Party };
import { PartyInvite } from "./party_invite_type.ts";
export { PartyInvite };
import { PartyInviteCleanupTimer } from "./party_invite_cleanup_timer_type.ts";
export { PartyInviteCleanupTimer };
import { PartyMember } from "./party_member_type.ts";
export { PartyMember };
import { Player } from "./player_type.ts";
export { Player };
import { PlayerDamageEvent } from "./player_damage_event_type.ts";
export { PlayerDamageEvent };
import { PlayerHealEvent } from "./player_heal_event_type.ts";
export { PlayerHealEvent };
import { PlayerJob } from "./player_job_type.ts";
export { PlayerJob };
import { PlayerLevel } from "./player_level_type.ts";
export { PlayerLevel };
import { PlayerMessage } from "./player_message_type.ts";
export { PlayerMessage };
import { PlayerState } from "./player_state_type.ts";
export { PlayerState };
import { PlayerTeleport } from "./player_teleport_type.ts";
export { PlayerTeleport };
import { Spawn } from "./spawn_type.ts";
export { Spawn };
import { SpawnEnemiesTimer } from "./spawn_enemies_timer_type.ts";
export { SpawnEnemiesTimer };
import { SpawnRoute } from "./spawn_route_type.ts";
export { SpawnRoute };
import { Teleport } from "./teleport_type.ts";
export { Teleport };

const REMOTE_MODULE = {
  tables: {
    Boss: {
      tableName: "Boss",
      rowType: Boss.getTypeScriptAlgebraicType(),
      primaryKey: "bossId",
      primaryKeyInfo: {
        colName: "bossId",
        colType: Boss.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    BossAttack: {
      tableName: "BossAttack",
      rowType: BossAttack.getTypeScriptAlgebraicType(),
      primaryKey: "attackId",
      primaryKeyInfo: {
        colName: "attackId",
        colType: BossAttack.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    BossAttackState: {
      tableName: "BossAttackState",
      rowType: BossAttackState.getTypeScriptAlgebraicType(),
      primaryKey: "stateId",
      primaryKeyInfo: {
        colName: "stateId",
        colType: BossAttackState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    BossRoute: {
      tableName: "BossRoute",
      rowType: BossRoute.getTypeScriptAlgebraicType(),
      primaryKey: "routeId",
      primaryKeyInfo: {
        colName: "routeId",
        colType: BossRoute.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    BossTrigger: {
      tableName: "BossTrigger",
      rowType: BossTrigger.getTypeScriptAlgebraicType(),
      primaryKey: "enemyType",
      primaryKeyInfo: {
        colName: "enemyType",
        colType: BossTrigger.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    Broadcast: {
      tableName: "Broadcast",
      rowType: Broadcast.getTypeScriptAlgebraicType(),
      primaryKey: "broadcastId",
      primaryKeyInfo: {
        colName: "broadcastId",
        colType: Broadcast.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    Enemy: {
      tableName: "Enemy",
      rowType: Enemy.getTypeScriptAlgebraicType(),
      primaryKey: "name",
      primaryKeyInfo: {
        colName: "name",
        colType: Enemy.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    EnemyDamageEvent: {
      tableName: "EnemyDamageEvent",
      rowType: EnemyDamageEvent.getTypeScriptAlgebraicType(),
      primaryKey: "damageEventId",
      primaryKeyInfo: {
        colName: "damageEventId",
        colType: EnemyDamageEvent.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    Job: {
      tableName: "Job",
      rowType: Job.getTypeScriptAlgebraicType(),
      primaryKey: "jobId",
      primaryKeyInfo: {
        colName: "jobId",
        colType: Job.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    JobAttack: {
      tableName: "JobAttack",
      rowType: JobAttack.getTypeScriptAlgebraicType(),
      primaryKey: "attackId",
      primaryKeyInfo: {
        colName: "attackId",
        colType: JobAttack.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    JobPassive: {
      tableName: "JobPassive",
      rowType: JobPassive.getTypeScriptAlgebraicType(),
      primaryKey: "passiveId",
      primaryKeyInfo: {
        colName: "passiveId",
        colType: JobPassive.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    Leaderboard: {
      tableName: "Leaderboard",
      rowType: Leaderboard.getTypeScriptAlgebraicType(),
      primaryKey: "rank",
      primaryKeyInfo: {
        colName: "rank",
        colType: Leaderboard.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    Party: {
      tableName: "Party",
      rowType: Party.getTypeScriptAlgebraicType(),
      primaryKey: "partyId",
      primaryKeyInfo: {
        colName: "partyId",
        colType: Party.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    PartyInvite: {
      tableName: "PartyInvite",
      rowType: PartyInvite.getTypeScriptAlgebraicType(),
      primaryKey: "inviteId",
      primaryKeyInfo: {
        colName: "inviteId",
        colType: PartyInvite.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    PartyMember: {
      tableName: "PartyMember",
      rowType: PartyMember.getTypeScriptAlgebraicType(),
      primaryKey: "partyMemberId",
      primaryKeyInfo: {
        colName: "partyMemberId",
        colType: PartyMember.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    Player: {
      tableName: "Player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    PlayerDamageEvent: {
      tableName: "PlayerDamageEvent",
      rowType: PlayerDamageEvent.getTypeScriptAlgebraicType(),
      primaryKey: "damageEventId",
      primaryKeyInfo: {
        colName: "damageEventId",
        colType: PlayerDamageEvent.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    PlayerHealEvent: {
      tableName: "PlayerHealEvent",
      rowType: PlayerHealEvent.getTypeScriptAlgebraicType(),
      primaryKey: "healEventId",
      primaryKeyInfo: {
        colName: "healEventId",
        colType: PlayerHealEvent.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    PlayerJob: {
      tableName: "PlayerJob",
      rowType: PlayerJob.getTypeScriptAlgebraicType(),
      primaryKey: "playerJobId",
      primaryKeyInfo: {
        colName: "playerJobId",
        colType: PlayerJob.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    PlayerLevel: {
      tableName: "PlayerLevel",
      rowType: PlayerLevel.getTypeScriptAlgebraicType(),
      primaryKey: "level",
      primaryKeyInfo: {
        colName: "level",
        colType: PlayerLevel.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    PlayerMessage: {
      tableName: "PlayerMessage",
      rowType: PlayerMessage.getTypeScriptAlgebraicType(),
      primaryKey: "messageId",
      primaryKeyInfo: {
        colName: "messageId",
        colType: PlayerMessage.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    PlayerTeleport: {
      tableName: "PlayerTeleport",
      rowType: PlayerTeleport.getTypeScriptAlgebraicType(),
      primaryKey: "playerTeleportId",
      primaryKeyInfo: {
        colName: "playerTeleportId",
        colType: PlayerTeleport.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    Spawn: {
      tableName: "Spawn",
      rowType: Spawn.getTypeScriptAlgebraicType(),
      primaryKey: "spawnId",
      primaryKeyInfo: {
        colName: "spawnId",
        colType: Spawn.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    SpawnRoute: {
      tableName: "SpawnRoute",
      rowType: SpawnRoute.getTypeScriptAlgebraicType(),
      primaryKey: "routeId",
      primaryKeyInfo: {
        colName: "routeId",
        colType: SpawnRoute.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    Teleport: {
      tableName: "Teleport",
      rowType: Teleport.getTypeScriptAlgebraicType(),
      primaryKey: "locationName",
      primaryKeyInfo: {
        colName: "locationName",
        colType: Teleport.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    boss_action_timer: {
      tableName: "boss_action_timer",
      rowType: BossActionTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: BossActionTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    broadcast_cleanup_timer: {
      tableName: "broadcast_cleanup_timer",
      rowType: BroadcastCleanupTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: BroadcastCleanupTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    cleanup_dead_bodies_timer: {
      tableName: "cleanup_dead_bodies_timer",
      rowType: CleanupDeadBodiesTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: CleanupDeadBodiesTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    combat_timeout_timer: {
      tableName: "combat_timeout_timer",
      rowType: CombatTimeoutTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: CombatTimeoutTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    enemy_patrol_timer: {
      tableName: "enemy_patrol_timer",
      rowType: EnemyPatrolTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: EnemyPatrolTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    leaderboard_update_timer: {
      tableName: "leaderboard_update_timer",
      rowType: LeaderboardUpdateTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: LeaderboardUpdateTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    message_cleanup_timer: {
      tableName: "message_cleanup_timer",
      rowType: MessageCleanupTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: MessageCleanupTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    party_invite_cleanup_timer: {
      tableName: "party_invite_cleanup_timer",
      rowType: PartyInviteCleanupTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PartyInviteCleanupTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    spawn_enemies_timer: {
      tableName: "spawn_enemies_timer",
      rowType: SpawnEnemiesTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: SpawnEnemiesTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    AcceptPartyInvite: {
      reducerName: "AcceptPartyInvite",
      argsType: AcceptPartyInvite.getTypeScriptAlgebraicType(),
    },
    BroadcastMessage: {
      reducerName: "BroadcastMessage",
      argsType: BroadcastMessage.getTypeScriptAlgebraicType(),
    },
    ChangeJob: {
      reducerName: "ChangeJob",
      argsType: ChangeJob.getTypeScriptAlgebraicType(),
    },
    CheckCombatTimeouts: {
      reducerName: "CheckCombatTimeouts",
      argsType: CheckCombatTimeouts.getTypeScriptAlgebraicType(),
    },
    CleanupDeadBodies: {
      reducerName: "CleanupDeadBodies",
      argsType: CleanupDeadBodies.getTypeScriptAlgebraicType(),
    },
    CleanupExpiredPartyInvites: {
      reducerName: "CleanupExpiredPartyInvites",
      argsType: CleanupExpiredPartyInvites.getTypeScriptAlgebraicType(),
    },
    CleanupInactivePlayers: {
      reducerName: "CleanupInactivePlayers",
      argsType: CleanupInactivePlayers.getTypeScriptAlgebraicType(),
    },
    CleanupOldBroadcasts: {
      reducerName: "CleanupOldBroadcasts",
      argsType: CleanupOldBroadcasts.getTypeScriptAlgebraicType(),
    },
    CleanupOldMessages: {
      reducerName: "CleanupOldMessages",
      argsType: CleanupOldMessages.getTypeScriptAlgebraicType(),
    },
    ClearAllJobData: {
      reducerName: "ClearAllJobData",
      argsType: ClearAllJobData.getTypeScriptAlgebraicType(),
    },
    Connect: {
      reducerName: "Connect",
      argsType: Connect.getTypeScriptAlgebraicType(),
    },
    CreateParty: {
      reducerName: "CreateParty",
      argsType: CreateParty.getTypeScriptAlgebraicType(),
    },
    DamageEnemy: {
      reducerName: "DamageEnemy",
      argsType: DamageEnemy.getTypeScriptAlgebraicType(),
    },
    Debug: {
      reducerName: "Debug",
      argsType: Debug.getTypeScriptAlgebraicType(),
    },
    Disconnect: {
      reducerName: "Disconnect",
      argsType: Disconnect.getTypeScriptAlgebraicType(),
    },
    HealPartyMembers: {
      reducerName: "HealPartyMembers",
      argsType: HealPartyMembers.getTypeScriptAlgebraicType(),
    },
    InitializeBossRoutes: {
      reducerName: "InitializeBossRoutes",
      argsType: InitializeBossRoutes.getTypeScriptAlgebraicType(),
    },
    InitializeEnemyRoutes: {
      reducerName: "InitializeEnemyRoutes",
      argsType: InitializeEnemyRoutes.getTypeScriptAlgebraicType(),
    },
    InitializeJob: {
      reducerName: "InitializeJob",
      argsType: InitializeJob.getTypeScriptAlgebraicType(),
    },
    InitializeJobAttack: {
      reducerName: "InitializeJobAttack",
      argsType: InitializeJobAttack.getTypeScriptAlgebraicType(),
    },
    InitializeJobPassive: {
      reducerName: "InitializeJobPassive",
      argsType: InitializeJobPassive.getTypeScriptAlgebraicType(),
    },
    InitializeTeleports: {
      reducerName: "InitializeTeleports",
      argsType: InitializeTeleports.getTypeScriptAlgebraicType(),
    },
    InstakillPlayer: {
      reducerName: "InstakillPlayer",
      argsType: InstakillPlayer.getTypeScriptAlgebraicType(),
    },
    InviteToParty: {
      reducerName: "InviteToParty",
      argsType: InviteToParty.getTypeScriptAlgebraicType(),
    },
    LeaveParty: {
      reducerName: "LeaveParty",
      argsType: LeaveParty.getTypeScriptAlgebraicType(),
    },
    PlayerTakeDamage: {
      reducerName: "PlayerTakeDamage",
      argsType: PlayerTakeDamage.getTypeScriptAlgebraicType(),
    },
    PopulateBoss: {
      reducerName: "PopulateBoss",
      argsType: PopulateBoss.getTypeScriptAlgebraicType(),
    },
    PopulateBossTriggers: {
      reducerName: "PopulateBossTriggers",
      argsType: PopulateBossTriggers.getTypeScriptAlgebraicType(),
    },
    PopulateEnemy: {
      reducerName: "PopulateEnemy",
      argsType: PopulateEnemy.getTypeScriptAlgebraicType(),
    },
    PopulatePlayerLevel: {
      reducerName: "PopulatePlayerLevel",
      argsType: PopulatePlayerLevel.getTypeScriptAlgebraicType(),
    },
    RecoverFromDamage: {
      reducerName: "RecoverFromDamage",
      argsType: RecoverFromDamage.getTypeScriptAlgebraicType(),
    },
    RemoveFromParty: {
      reducerName: "RemoveFromParty",
      argsType: RemoveFromParty.getTypeScriptAlgebraicType(),
    },
    RespawnPlayer: {
      reducerName: "RespawnPlayer",
      argsType: RespawnPlayer.getTypeScriptAlgebraicType(),
    },
    SendPlayerMessage: {
      reducerName: "SendPlayerMessage",
      argsType: SendPlayerMessage.getTypeScriptAlgebraicType(),
    },
    SetName: {
      reducerName: "SetName",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
    SpawnAllEnemies: {
      reducerName: "SpawnAllEnemies",
      argsType: SpawnAllEnemies.getTypeScriptAlgebraicType(),
    },
    SpawnBoss: {
      reducerName: "SpawnBoss",
      argsType: SpawnBoss.getTypeScriptAlgebraicType(),
    },
    SpawnMissingEnemies: {
      reducerName: "SpawnMissingEnemies",
      argsType: SpawnMissingEnemies.getTypeScriptAlgebraicType(),
    },
    TeleportPlayer: {
      reducerName: "TeleportPlayer",
      argsType: TeleportPlayer.getTypeScriptAlgebraicType(),
    },
    UpdateBossActions: {
      reducerName: "UpdateBossActions",
      argsType: UpdateBossActions.getTypeScriptAlgebraicType(),
    },
    UpdateEnemyPatrol: {
      reducerName: "UpdateEnemyPatrol",
      argsType: UpdateEnemyPatrol.getTypeScriptAlgebraicType(),
    },
    UpdateLeaderboard: {
      reducerName: "UpdateLeaderboard",
      argsType: UpdateLeaderboard.getTypeScriptAlgebraicType(),
    },
    UpdatePartyName: {
      reducerName: "UpdatePartyName",
      argsType: UpdatePartyName.getTypeScriptAlgebraicType(),
    },
    UpdatePlayerPosition: {
      reducerName: "UpdatePlayerPosition",
      argsType: UpdatePlayerPosition.getTypeScriptAlgebraicType(),
    },
    UpdatePlayerState: {
      reducerName: "UpdatePlayerState",
      argsType: UpdatePlayerState.getTypeScriptAlgebraicType(),
    },
    UpdatePlayerTyping: {
      reducerName: "UpdatePlayerTyping",
      argsType: UpdatePlayerTyping.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.2.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AcceptPartyInvite", args: AcceptPartyInvite }
| { name: "BroadcastMessage", args: BroadcastMessage }
| { name: "ChangeJob", args: ChangeJob }
| { name: "CheckCombatTimeouts", args: CheckCombatTimeouts }
| { name: "CleanupDeadBodies", args: CleanupDeadBodies }
| { name: "CleanupExpiredPartyInvites", args: CleanupExpiredPartyInvites }
| { name: "CleanupInactivePlayers", args: CleanupInactivePlayers }
| { name: "CleanupOldBroadcasts", args: CleanupOldBroadcasts }
| { name: "CleanupOldMessages", args: CleanupOldMessages }
| { name: "ClearAllJobData", args: ClearAllJobData }
| { name: "Connect", args: Connect }
| { name: "CreateParty", args: CreateParty }
| { name: "DamageEnemy", args: DamageEnemy }
| { name: "Debug", args: Debug }
| { name: "Disconnect", args: Disconnect }
| { name: "HealPartyMembers", args: HealPartyMembers }
| { name: "InitializeBossRoutes", args: InitializeBossRoutes }
| { name: "InitializeEnemyRoutes", args: InitializeEnemyRoutes }
| { name: "InitializeJob", args: InitializeJob }
| { name: "InitializeJobAttack", args: InitializeJobAttack }
| { name: "InitializeJobPassive", args: InitializeJobPassive }
| { name: "InitializeTeleports", args: InitializeTeleports }
| { name: "InstakillPlayer", args: InstakillPlayer }
| { name: "InviteToParty", args: InviteToParty }
| { name: "LeaveParty", args: LeaveParty }
| { name: "PlayerTakeDamage", args: PlayerTakeDamage }
| { name: "PopulateBoss", args: PopulateBoss }
| { name: "PopulateBossTriggers", args: PopulateBossTriggers }
| { name: "PopulateEnemy", args: PopulateEnemy }
| { name: "PopulatePlayerLevel", args: PopulatePlayerLevel }
| { name: "RecoverFromDamage", args: RecoverFromDamage }
| { name: "RemoveFromParty", args: RemoveFromParty }
| { name: "RespawnPlayer", args: RespawnPlayer }
| { name: "SendPlayerMessage", args: SendPlayerMessage }
| { name: "SetName", args: SetName }
| { name: "SpawnAllEnemies", args: SpawnAllEnemies }
| { name: "SpawnBoss", args: SpawnBoss }
| { name: "SpawnMissingEnemies", args: SpawnMissingEnemies }
| { name: "TeleportPlayer", args: TeleportPlayer }
| { name: "UpdateBossActions", args: UpdateBossActions }
| { name: "UpdateEnemyPatrol", args: UpdateEnemyPatrol }
| { name: "UpdateLeaderboard", args: UpdateLeaderboard }
| { name: "UpdatePartyName", args: UpdatePartyName }
| { name: "UpdatePlayerPosition", args: UpdatePlayerPosition }
| { name: "UpdatePlayerState", args: UpdatePlayerState }
| { name: "UpdatePlayerTyping", args: UpdatePlayerTyping }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  acceptPartyInvite(inviteId: number) {
    const __args = { inviteId };
    let __writer = new BinaryWriter(1024);
    AcceptPartyInvite.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AcceptPartyInvite", __argsBuffer, this.setCallReducerFlags.acceptPartyInviteFlags);
  }

  onAcceptPartyInvite(callback: (ctx: ReducerEventContext, inviteId: number) => void) {
    this.connection.onReducer("AcceptPartyInvite", callback);
  }

  removeOnAcceptPartyInvite(callback: (ctx: ReducerEventContext, inviteId: number) => void) {
    this.connection.offReducer("AcceptPartyInvite", callback);
  }

  broadcastMessage(message: string) {
    const __args = { message };
    let __writer = new BinaryWriter(1024);
    BroadcastMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("BroadcastMessage", __argsBuffer, this.setCallReducerFlags.broadcastMessageFlags);
  }

  onBroadcastMessage(callback: (ctx: ReducerEventContext, message: string) => void) {
    this.connection.onReducer("BroadcastMessage", callback);
  }

  removeOnBroadcastMessage(callback: (ctx: ReducerEventContext, message: string) => void) {
    this.connection.offReducer("BroadcastMessage", callback);
  }

  changeJob(newJobKey: string) {
    const __args = { newJobKey };
    let __writer = new BinaryWriter(1024);
    ChangeJob.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ChangeJob", __argsBuffer, this.setCallReducerFlags.changeJobFlags);
  }

  onChangeJob(callback: (ctx: ReducerEventContext, newJobKey: string) => void) {
    this.connection.onReducer("ChangeJob", callback);
  }

  removeOnChangeJob(callback: (ctx: ReducerEventContext, newJobKey: string) => void) {
    this.connection.offReducer("ChangeJob", callback);
  }

  checkCombatTimeouts(timer: CombatTimeoutTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    CheckCombatTimeouts.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CheckCombatTimeouts", __argsBuffer, this.setCallReducerFlags.checkCombatTimeoutsFlags);
  }

  onCheckCombatTimeouts(callback: (ctx: ReducerEventContext, timer: CombatTimeoutTimer) => void) {
    this.connection.onReducer("CheckCombatTimeouts", callback);
  }

  removeOnCheckCombatTimeouts(callback: (ctx: ReducerEventContext, timer: CombatTimeoutTimer) => void) {
    this.connection.offReducer("CheckCombatTimeouts", callback);
  }

  cleanupDeadBodies(timer: CleanupDeadBodiesTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    CleanupDeadBodies.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CleanupDeadBodies", __argsBuffer, this.setCallReducerFlags.cleanupDeadBodiesFlags);
  }

  onCleanupDeadBodies(callback: (ctx: ReducerEventContext, timer: CleanupDeadBodiesTimer) => void) {
    this.connection.onReducer("CleanupDeadBodies", callback);
  }

  removeOnCleanupDeadBodies(callback: (ctx: ReducerEventContext, timer: CleanupDeadBodiesTimer) => void) {
    this.connection.offReducer("CleanupDeadBodies", callback);
  }

  cleanupExpiredPartyInvites(timer: PartyInviteCleanupTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    CleanupExpiredPartyInvites.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CleanupExpiredPartyInvites", __argsBuffer, this.setCallReducerFlags.cleanupExpiredPartyInvitesFlags);
  }

  onCleanupExpiredPartyInvites(callback: (ctx: ReducerEventContext, timer: PartyInviteCleanupTimer) => void) {
    this.connection.onReducer("CleanupExpiredPartyInvites", callback);
  }

  removeOnCleanupExpiredPartyInvites(callback: (ctx: ReducerEventContext, timer: PartyInviteCleanupTimer) => void) {
    this.connection.offReducer("CleanupExpiredPartyInvites", callback);
  }

  cleanupInactivePlayers(adminApiKey: string) {
    const __args = { adminApiKey };
    let __writer = new BinaryWriter(1024);
    CleanupInactivePlayers.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CleanupInactivePlayers", __argsBuffer, this.setCallReducerFlags.cleanupInactivePlayersFlags);
  }

  onCleanupInactivePlayers(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.onReducer("CleanupInactivePlayers", callback);
  }

  removeOnCleanupInactivePlayers(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.offReducer("CleanupInactivePlayers", callback);
  }

  cleanupOldBroadcasts(timer: BroadcastCleanupTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    CleanupOldBroadcasts.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CleanupOldBroadcasts", __argsBuffer, this.setCallReducerFlags.cleanupOldBroadcastsFlags);
  }

  onCleanupOldBroadcasts(callback: (ctx: ReducerEventContext, timer: BroadcastCleanupTimer) => void) {
    this.connection.onReducer("CleanupOldBroadcasts", callback);
  }

  removeOnCleanupOldBroadcasts(callback: (ctx: ReducerEventContext, timer: BroadcastCleanupTimer) => void) {
    this.connection.offReducer("CleanupOldBroadcasts", callback);
  }

  cleanupOldMessages(timer: MessageCleanupTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    CleanupOldMessages.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CleanupOldMessages", __argsBuffer, this.setCallReducerFlags.cleanupOldMessagesFlags);
  }

  onCleanupOldMessages(callback: (ctx: ReducerEventContext, timer: MessageCleanupTimer) => void) {
    this.connection.onReducer("CleanupOldMessages", callback);
  }

  removeOnCleanupOldMessages(callback: (ctx: ReducerEventContext, timer: MessageCleanupTimer) => void) {
    this.connection.offReducer("CleanupOldMessages", callback);
  }

  clearAllJobData(adminApiKey: string) {
    const __args = { adminApiKey };
    let __writer = new BinaryWriter(1024);
    ClearAllJobData.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ClearAllJobData", __argsBuffer, this.setCallReducerFlags.clearAllJobDataFlags);
  }

  onClearAllJobData(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.onReducer("ClearAllJobData", callback);
  }

  removeOnClearAllJobData(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.offReducer("ClearAllJobData", callback);
  }

  onConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("Connect", callback);
  }

  removeOnConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("Connect", callback);
  }

  createParty(partyName: string) {
    const __args = { partyName };
    let __writer = new BinaryWriter(1024);
    CreateParty.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateParty", __argsBuffer, this.setCallReducerFlags.createPartyFlags);
  }

  onCreateParty(callback: (ctx: ReducerEventContext, partyName: string) => void) {
    this.connection.onReducer("CreateParty", callback);
  }

  removeOnCreateParty(callback: (ctx: ReducerEventContext, partyName: string) => void) {
    this.connection.offReducer("CreateParty", callback);
  }

  damageEnemy(spawnIds: number[], attackType: AttackType) {
    const __args = { spawnIds, attackType };
    let __writer = new BinaryWriter(1024);
    DamageEnemy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DamageEnemy", __argsBuffer, this.setCallReducerFlags.damageEnemyFlags);
  }

  onDamageEnemy(callback: (ctx: ReducerEventContext, spawnIds: number[], attackType: AttackType) => void) {
    this.connection.onReducer("DamageEnemy", callback);
  }

  removeOnDamageEnemy(callback: (ctx: ReducerEventContext, spawnIds: number[], attackType: AttackType) => void) {
    this.connection.offReducer("DamageEnemy", callback);
  }

  debug(adminApiKey: string) {
    const __args = { adminApiKey };
    let __writer = new BinaryWriter(1024);
    Debug.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("Debug", __argsBuffer, this.setCallReducerFlags.debugFlags);
  }

  onDebug(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.onReducer("Debug", callback);
  }

  removeOnDebug(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.offReducer("Debug", callback);
  }

  onDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("Disconnect", callback);
  }

  removeOnDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("Disconnect", callback);
  }

  healPartyMembers(attackType: AttackType) {
    const __args = { attackType };
    let __writer = new BinaryWriter(1024);
    HealPartyMembers.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("HealPartyMembers", __argsBuffer, this.setCallReducerFlags.healPartyMembersFlags);
  }

  onHealPartyMembers(callback: (ctx: ReducerEventContext, attackType: AttackType) => void) {
    this.connection.onReducer("HealPartyMembers", callback);
  }

  removeOnHealPartyMembers(callback: (ctx: ReducerEventContext, attackType: AttackType) => void) {
    this.connection.offReducer("HealPartyMembers", callback);
  }

  initializeBossRoutes(adminApiKey: string, tilemapJson: string) {
    const __args = { adminApiKey, tilemapJson };
    let __writer = new BinaryWriter(1024);
    InitializeBossRoutes.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializeBossRoutes", __argsBuffer, this.setCallReducerFlags.initializeBossRoutesFlags);
  }

  onInitializeBossRoutes(callback: (ctx: ReducerEventContext, adminApiKey: string, tilemapJson: string) => void) {
    this.connection.onReducer("InitializeBossRoutes", callback);
  }

  removeOnInitializeBossRoutes(callback: (ctx: ReducerEventContext, adminApiKey: string, tilemapJson: string) => void) {
    this.connection.offReducer("InitializeBossRoutes", callback);
  }

  initializeEnemyRoutes(adminApiKey: string, tilemapJson: string) {
    const __args = { adminApiKey, tilemapJson };
    let __writer = new BinaryWriter(1024);
    InitializeEnemyRoutes.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializeEnemyRoutes", __argsBuffer, this.setCallReducerFlags.initializeEnemyRoutesFlags);
  }

  onInitializeEnemyRoutes(callback: (ctx: ReducerEventContext, adminApiKey: string, tilemapJson: string) => void) {
    this.connection.onReducer("InitializeEnemyRoutes", callback);
  }

  removeOnInitializeEnemyRoutes(callback: (ctx: ReducerEventContext, adminApiKey: string, tilemapJson: string) => void) {
    this.connection.offReducer("InitializeEnemyRoutes", callback);
  }

  initializeJob(adminApiKey: string, jobKey: string, displayName: string, health: number, moveSpeed: number, mana: number, hpRecovery: number, manaRecovery: number, resSword: number, resAxe: number, resBow: number, resSpear: number, resDark: number, resSpike: number, resClaw: number, resGreatsword: number, unlockLevel: number) {
    const __args = { adminApiKey, jobKey, displayName, health, moveSpeed, mana, hpRecovery, manaRecovery, resSword, resAxe, resBow, resSpear, resDark, resSpike, resClaw, resGreatsword, unlockLevel };
    let __writer = new BinaryWriter(1024);
    InitializeJob.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializeJob", __argsBuffer, this.setCallReducerFlags.initializeJobFlags);
  }

  onInitializeJob(callback: (ctx: ReducerEventContext, adminApiKey: string, jobKey: string, displayName: string, health: number, moveSpeed: number, mana: number, hpRecovery: number, manaRecovery: number, resSword: number, resAxe: number, resBow: number, resSpear: number, resDark: number, resSpike: number, resClaw: number, resGreatsword: number, unlockLevel: number) => void) {
    this.connection.onReducer("InitializeJob", callback);
  }

  removeOnInitializeJob(callback: (ctx: ReducerEventContext, adminApiKey: string, jobKey: string, displayName: string, health: number, moveSpeed: number, mana: number, hpRecovery: number, manaRecovery: number, resSword: number, resAxe: number, resBow: number, resSpear: number, resDark: number, resSpike: number, resClaw: number, resGreatsword: number, unlockLevel: number) => void) {
    this.connection.offReducer("InitializeJob", callback);
  }

  initializeJobAttack(adminApiKey: string, jobKey: string, attackSlot: number, attackType: string, name: string, damage: number, cooldown: number, critChance: number, knockback: number, range: number, hits: number, targets: number, manaCost: number, ammoCost: number, modifiers: string, manaLeech: number, projectile: string | undefined, skillEffect: string | undefined, areaRadius: number | undefined) {
    const __args = { adminApiKey, jobKey, attackSlot, attackType, name, damage, cooldown, critChance, knockback, range, hits, targets, manaCost, ammoCost, modifiers, manaLeech, projectile, skillEffect, areaRadius };
    let __writer = new BinaryWriter(1024);
    InitializeJobAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializeJobAttack", __argsBuffer, this.setCallReducerFlags.initializeJobAttackFlags);
  }

  onInitializeJobAttack(callback: (ctx: ReducerEventContext, adminApiKey: string, jobKey: string, attackSlot: number, attackType: string, name: string, damage: number, cooldown: number, critChance: number, knockback: number, range: number, hits: number, targets: number, manaCost: number, ammoCost: number, modifiers: string, manaLeech: number, projectile: string | undefined, skillEffect: string | undefined, areaRadius: number | undefined) => void) {
    this.connection.onReducer("InitializeJobAttack", callback);
  }

  removeOnInitializeJobAttack(callback: (ctx: ReducerEventContext, adminApiKey: string, jobKey: string, attackSlot: number, attackType: string, name: string, damage: number, cooldown: number, critChance: number, knockback: number, range: number, hits: number, targets: number, manaCost: number, ammoCost: number, modifiers: string, manaLeech: number, projectile: string | undefined, skillEffect: string | undefined, areaRadius: number | undefined) => void) {
    this.connection.offReducer("InitializeJobAttack", callback);
  }

  initializeJobPassive(adminApiKey: string, jobKey: string, passiveSlot: number, name: string) {
    const __args = { adminApiKey, jobKey, passiveSlot, name };
    let __writer = new BinaryWriter(1024);
    InitializeJobPassive.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializeJobPassive", __argsBuffer, this.setCallReducerFlags.initializeJobPassiveFlags);
  }

  onInitializeJobPassive(callback: (ctx: ReducerEventContext, adminApiKey: string, jobKey: string, passiveSlot: number, name: string) => void) {
    this.connection.onReducer("InitializeJobPassive", callback);
  }

  removeOnInitializeJobPassive(callback: (ctx: ReducerEventContext, adminApiKey: string, jobKey: string, passiveSlot: number, name: string) => void) {
    this.connection.offReducer("InitializeJobPassive", callback);
  }

  initializeTeleports(adminApiKey: string, teleportJson: string) {
    const __args = { adminApiKey, teleportJson };
    let __writer = new BinaryWriter(1024);
    InitializeTeleports.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializeTeleports", __argsBuffer, this.setCallReducerFlags.initializeTeleportsFlags);
  }

  onInitializeTeleports(callback: (ctx: ReducerEventContext, adminApiKey: string, teleportJson: string) => void) {
    this.connection.onReducer("InitializeTeleports", callback);
  }

  removeOnInitializeTeleports(callback: (ctx: ReducerEventContext, adminApiKey: string, teleportJson: string) => void) {
    this.connection.offReducer("InitializeTeleports", callback);
  }

  instakillPlayer(adminApiKey: string) {
    const __args = { adminApiKey };
    let __writer = new BinaryWriter(1024);
    InstakillPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InstakillPlayer", __argsBuffer, this.setCallReducerFlags.instakillPlayerFlags);
  }

  onInstakillPlayer(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.onReducer("InstakillPlayer", callback);
  }

  removeOnInstakillPlayer(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.offReducer("InstakillPlayer", callback);
  }

  inviteToParty(targetPlayerName: string) {
    const __args = { targetPlayerName };
    let __writer = new BinaryWriter(1024);
    InviteToParty.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InviteToParty", __argsBuffer, this.setCallReducerFlags.inviteToPartyFlags);
  }

  onInviteToParty(callback: (ctx: ReducerEventContext, targetPlayerName: string) => void) {
    this.connection.onReducer("InviteToParty", callback);
  }

  removeOnInviteToParty(callback: (ctx: ReducerEventContext, targetPlayerName: string) => void) {
    this.connection.offReducer("InviteToParty", callback);
  }

  leaveParty() {
    this.connection.callReducer("LeaveParty", new Uint8Array(0), this.setCallReducerFlags.leavePartyFlags);
  }

  onLeaveParty(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("LeaveParty", callback);
  }

  removeOnLeaveParty(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("LeaveParty", callback);
  }

  playerTakeDamage(spawnId: number) {
    const __args = { spawnId };
    let __writer = new BinaryWriter(1024);
    PlayerTakeDamage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("PlayerTakeDamage", __argsBuffer, this.setCallReducerFlags.playerTakeDamageFlags);
  }

  onPlayerTakeDamage(callback: (ctx: ReducerEventContext, spawnId: number) => void) {
    this.connection.onReducer("PlayerTakeDamage", callback);
  }

  removeOnPlayerTakeDamage(callback: (ctx: ReducerEventContext, spawnId: number) => void) {
    this.connection.offReducer("PlayerTakeDamage", callback);
  }

  populateBoss(adminApiKey: string, bossConfigJson: string) {
    const __args = { adminApiKey, bossConfigJson };
    let __writer = new BinaryWriter(1024);
    PopulateBoss.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("PopulateBoss", __argsBuffer, this.setCallReducerFlags.populateBossFlags);
  }

  onPopulateBoss(callback: (ctx: ReducerEventContext, adminApiKey: string, bossConfigJson: string) => void) {
    this.connection.onReducer("PopulateBoss", callback);
  }

  removeOnPopulateBoss(callback: (ctx: ReducerEventContext, adminApiKey: string, bossConfigJson: string) => void) {
    this.connection.offReducer("PopulateBoss", callback);
  }

  populateBossTriggers(adminApiKey: string, enemyConfigJson: string) {
    const __args = { adminApiKey, enemyConfigJson };
    let __writer = new BinaryWriter(1024);
    PopulateBossTriggers.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("PopulateBossTriggers", __argsBuffer, this.setCallReducerFlags.populateBossTriggersFlags);
  }

  onPopulateBossTriggers(callback: (ctx: ReducerEventContext, adminApiKey: string, enemyConfigJson: string) => void) {
    this.connection.onReducer("PopulateBossTriggers", callback);
  }

  removeOnPopulateBossTriggers(callback: (ctx: ReducerEventContext, adminApiKey: string, enemyConfigJson: string) => void) {
    this.connection.offReducer("PopulateBossTriggers", callback);
  }

  populateEnemy(adminApiKey: string, enemyConfigJson: string) {
    const __args = { adminApiKey, enemyConfigJson };
    let __writer = new BinaryWriter(1024);
    PopulateEnemy.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("PopulateEnemy", __argsBuffer, this.setCallReducerFlags.populateEnemyFlags);
  }

  onPopulateEnemy(callback: (ctx: ReducerEventContext, adminApiKey: string, enemyConfigJson: string) => void) {
    this.connection.onReducer("PopulateEnemy", callback);
  }

  removeOnPopulateEnemy(callback: (ctx: ReducerEventContext, adminApiKey: string, enemyConfigJson: string) => void) {
    this.connection.offReducer("PopulateEnemy", callback);
  }

  populatePlayerLevel(adminApiKey: string, levelingCurveJson: string) {
    const __args = { adminApiKey, levelingCurveJson };
    let __writer = new BinaryWriter(1024);
    PopulatePlayerLevel.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("PopulatePlayerLevel", __argsBuffer, this.setCallReducerFlags.populatePlayerLevelFlags);
  }

  onPopulatePlayerLevel(callback: (ctx: ReducerEventContext, adminApiKey: string, levelingCurveJson: string) => void) {
    this.connection.onReducer("PopulatePlayerLevel", callback);
  }

  removeOnPopulatePlayerLevel(callback: (ctx: ReducerEventContext, adminApiKey: string, levelingCurveJson: string) => void) {
    this.connection.offReducer("PopulatePlayerLevel", callback);
  }

  recoverFromDamage(spawnId: number) {
    const __args = { spawnId };
    let __writer = new BinaryWriter(1024);
    RecoverFromDamage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RecoverFromDamage", __argsBuffer, this.setCallReducerFlags.recoverFromDamageFlags);
  }

  onRecoverFromDamage(callback: (ctx: ReducerEventContext, spawnId: number) => void) {
    this.connection.onReducer("RecoverFromDamage", callback);
  }

  removeOnRecoverFromDamage(callback: (ctx: ReducerEventContext, spawnId: number) => void) {
    this.connection.offReducer("RecoverFromDamage", callback);
  }

  removeFromParty(targetPlayerName: string) {
    const __args = { targetPlayerName };
    let __writer = new BinaryWriter(1024);
    RemoveFromParty.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RemoveFromParty", __argsBuffer, this.setCallReducerFlags.removeFromPartyFlags);
  }

  onRemoveFromParty(callback: (ctx: ReducerEventContext, targetPlayerName: string) => void) {
    this.connection.onReducer("RemoveFromParty", callback);
  }

  removeOnRemoveFromParty(callback: (ctx: ReducerEventContext, targetPlayerName: string) => void) {
    this.connection.offReducer("RemoveFromParty", callback);
  }

  respawnPlayer() {
    this.connection.callReducer("RespawnPlayer", new Uint8Array(0), this.setCallReducerFlags.respawnPlayerFlags);
  }

  onRespawnPlayer(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("RespawnPlayer", callback);
  }

  removeOnRespawnPlayer(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("RespawnPlayer", callback);
  }

  sendPlayerMessage(message: string) {
    const __args = { message };
    let __writer = new BinaryWriter(1024);
    SendPlayerMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SendPlayerMessage", __argsBuffer, this.setCallReducerFlags.sendPlayerMessageFlags);
  }

  onSendPlayerMessage(callback: (ctx: ReducerEventContext, message: string) => void) {
    this.connection.onReducer("SendPlayerMessage", callback);
  }

  removeOnSendPlayerMessage(callback: (ctx: ReducerEventContext, message: string) => void) {
    this.connection.offReducer("SendPlayerMessage", callback);
  }

  setName(newName: string) {
    const __args = { newName };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetName", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, newName: string) => void) {
    this.connection.onReducer("SetName", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, newName: string) => void) {
    this.connection.offReducer("SetName", callback);
  }

  spawnAllEnemies(adminApiKey: string) {
    const __args = { adminApiKey };
    let __writer = new BinaryWriter(1024);
    SpawnAllEnemies.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SpawnAllEnemies", __argsBuffer, this.setCallReducerFlags.spawnAllEnemiesFlags);
  }

  onSpawnAllEnemies(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.onReducer("SpawnAllEnemies", callback);
  }

  removeOnSpawnAllEnemies(callback: (ctx: ReducerEventContext, adminApiKey: string) => void) {
    this.connection.offReducer("SpawnAllEnemies", callback);
  }

  spawnBoss(adminApiKey: string, bossId: string, x: number, y: number) {
    const __args = { adminApiKey, bossId, x, y };
    let __writer = new BinaryWriter(1024);
    SpawnBoss.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SpawnBoss", __argsBuffer, this.setCallReducerFlags.spawnBossFlags);
  }

  onSpawnBoss(callback: (ctx: ReducerEventContext, adminApiKey: string, bossId: string, x: number, y: number) => void) {
    this.connection.onReducer("SpawnBoss", callback);
  }

  removeOnSpawnBoss(callback: (ctx: ReducerEventContext, adminApiKey: string, bossId: string, x: number, y: number) => void) {
    this.connection.offReducer("SpawnBoss", callback);
  }

  spawnMissingEnemies(timer: SpawnEnemiesTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    SpawnMissingEnemies.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SpawnMissingEnemies", __argsBuffer, this.setCallReducerFlags.spawnMissingEnemiesFlags);
  }

  onSpawnMissingEnemies(callback: (ctx: ReducerEventContext, timer: SpawnEnemiesTimer) => void) {
    this.connection.onReducer("SpawnMissingEnemies", callback);
  }

  removeOnSpawnMissingEnemies(callback: (ctx: ReducerEventContext, timer: SpawnEnemiesTimer) => void) {
    this.connection.offReducer("SpawnMissingEnemies", callback);
  }

  teleportPlayer(x: number, y: number) {
    const __args = { x, y };
    let __writer = new BinaryWriter(1024);
    TeleportPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("TeleportPlayer", __argsBuffer, this.setCallReducerFlags.teleportPlayerFlags);
  }

  onTeleportPlayer(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.onReducer("TeleportPlayer", callback);
  }

  removeOnTeleportPlayer(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.offReducer("TeleportPlayer", callback);
  }

  updateBossActions(timer: BossActionTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    UpdateBossActions.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateBossActions", __argsBuffer, this.setCallReducerFlags.updateBossActionsFlags);
  }

  onUpdateBossActions(callback: (ctx: ReducerEventContext, timer: BossActionTimer) => void) {
    this.connection.onReducer("UpdateBossActions", callback);
  }

  removeOnUpdateBossActions(callback: (ctx: ReducerEventContext, timer: BossActionTimer) => void) {
    this.connection.offReducer("UpdateBossActions", callback);
  }

  updateEnemyPatrol(timer: EnemyPatrolTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    UpdateEnemyPatrol.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateEnemyPatrol", __argsBuffer, this.setCallReducerFlags.updateEnemyPatrolFlags);
  }

  onUpdateEnemyPatrol(callback: (ctx: ReducerEventContext, timer: EnemyPatrolTimer) => void) {
    this.connection.onReducer("UpdateEnemyPatrol", callback);
  }

  removeOnUpdateEnemyPatrol(callback: (ctx: ReducerEventContext, timer: EnemyPatrolTimer) => void) {
    this.connection.offReducer("UpdateEnemyPatrol", callback);
  }

  updateLeaderboard(timer: LeaderboardUpdateTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    UpdateLeaderboard.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateLeaderboard", __argsBuffer, this.setCallReducerFlags.updateLeaderboardFlags);
  }

  onUpdateLeaderboard(callback: (ctx: ReducerEventContext, timer: LeaderboardUpdateTimer) => void) {
    this.connection.onReducer("UpdateLeaderboard", callback);
  }

  removeOnUpdateLeaderboard(callback: (ctx: ReducerEventContext, timer: LeaderboardUpdateTimer) => void) {
    this.connection.offReducer("UpdateLeaderboard", callback);
  }

  updatePartyName(newPartyName: string) {
    const __args = { newPartyName };
    let __writer = new BinaryWriter(1024);
    UpdatePartyName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdatePartyName", __argsBuffer, this.setCallReducerFlags.updatePartyNameFlags);
  }

  onUpdatePartyName(callback: (ctx: ReducerEventContext, newPartyName: string) => void) {
    this.connection.onReducer("UpdatePartyName", callback);
  }

  removeOnUpdatePartyName(callback: (ctx: ReducerEventContext, newPartyName: string) => void) {
    this.connection.offReducer("UpdatePartyName", callback);
  }

  updatePlayerPosition(x: number, y: number, facing: FacingDirection) {
    const __args = { x, y, facing };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerPosition.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdatePlayerPosition", __argsBuffer, this.setCallReducerFlags.updatePlayerPositionFlags);
  }

  onUpdatePlayerPosition(callback: (ctx: ReducerEventContext, x: number, y: number, facing: FacingDirection) => void) {
    this.connection.onReducer("UpdatePlayerPosition", callback);
  }

  removeOnUpdatePlayerPosition(callback: (ctx: ReducerEventContext, x: number, y: number, facing: FacingDirection) => void) {
    this.connection.offReducer("UpdatePlayerPosition", callback);
  }

  updatePlayerState(newState: PlayerState) {
    const __args = { newState };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdatePlayerState", __argsBuffer, this.setCallReducerFlags.updatePlayerStateFlags);
  }

  onUpdatePlayerState(callback: (ctx: ReducerEventContext, newState: PlayerState) => void) {
    this.connection.onReducer("UpdatePlayerState", callback);
  }

  removeOnUpdatePlayerState(callback: (ctx: ReducerEventContext, newState: PlayerState) => void) {
    this.connection.offReducer("UpdatePlayerState", callback);
  }

  updatePlayerTyping(isTyping: boolean) {
    const __args = { isTyping };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerTyping.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdatePlayerTyping", __argsBuffer, this.setCallReducerFlags.updatePlayerTypingFlags);
  }

  onUpdatePlayerTyping(callback: (ctx: ReducerEventContext, isTyping: boolean) => void) {
    this.connection.onReducer("UpdatePlayerTyping", callback);
  }

  removeOnUpdatePlayerTyping(callback: (ctx: ReducerEventContext, isTyping: boolean) => void) {
    this.connection.offReducer("UpdatePlayerTyping", callback);
  }

}

export class SetReducerFlags {
  acceptPartyInviteFlags: CallReducerFlags = 'FullUpdate';
  acceptPartyInvite(flags: CallReducerFlags) {
    this.acceptPartyInviteFlags = flags;
  }

  broadcastMessageFlags: CallReducerFlags = 'FullUpdate';
  broadcastMessage(flags: CallReducerFlags) {
    this.broadcastMessageFlags = flags;
  }

  changeJobFlags: CallReducerFlags = 'FullUpdate';
  changeJob(flags: CallReducerFlags) {
    this.changeJobFlags = flags;
  }

  checkCombatTimeoutsFlags: CallReducerFlags = 'FullUpdate';
  checkCombatTimeouts(flags: CallReducerFlags) {
    this.checkCombatTimeoutsFlags = flags;
  }

  cleanupDeadBodiesFlags: CallReducerFlags = 'FullUpdate';
  cleanupDeadBodies(flags: CallReducerFlags) {
    this.cleanupDeadBodiesFlags = flags;
  }

  cleanupExpiredPartyInvitesFlags: CallReducerFlags = 'FullUpdate';
  cleanupExpiredPartyInvites(flags: CallReducerFlags) {
    this.cleanupExpiredPartyInvitesFlags = flags;
  }

  cleanupInactivePlayersFlags: CallReducerFlags = 'FullUpdate';
  cleanupInactivePlayers(flags: CallReducerFlags) {
    this.cleanupInactivePlayersFlags = flags;
  }

  cleanupOldBroadcastsFlags: CallReducerFlags = 'FullUpdate';
  cleanupOldBroadcasts(flags: CallReducerFlags) {
    this.cleanupOldBroadcastsFlags = flags;
  }

  cleanupOldMessagesFlags: CallReducerFlags = 'FullUpdate';
  cleanupOldMessages(flags: CallReducerFlags) {
    this.cleanupOldMessagesFlags = flags;
  }

  clearAllJobDataFlags: CallReducerFlags = 'FullUpdate';
  clearAllJobData(flags: CallReducerFlags) {
    this.clearAllJobDataFlags = flags;
  }

  createPartyFlags: CallReducerFlags = 'FullUpdate';
  createParty(flags: CallReducerFlags) {
    this.createPartyFlags = flags;
  }

  damageEnemyFlags: CallReducerFlags = 'FullUpdate';
  damageEnemy(flags: CallReducerFlags) {
    this.damageEnemyFlags = flags;
  }

  debugFlags: CallReducerFlags = 'FullUpdate';
  debug(flags: CallReducerFlags) {
    this.debugFlags = flags;
  }

  healPartyMembersFlags: CallReducerFlags = 'FullUpdate';
  healPartyMembers(flags: CallReducerFlags) {
    this.healPartyMembersFlags = flags;
  }

  initializeBossRoutesFlags: CallReducerFlags = 'FullUpdate';
  initializeBossRoutes(flags: CallReducerFlags) {
    this.initializeBossRoutesFlags = flags;
  }

  initializeEnemyRoutesFlags: CallReducerFlags = 'FullUpdate';
  initializeEnemyRoutes(flags: CallReducerFlags) {
    this.initializeEnemyRoutesFlags = flags;
  }

  initializeJobFlags: CallReducerFlags = 'FullUpdate';
  initializeJob(flags: CallReducerFlags) {
    this.initializeJobFlags = flags;
  }

  initializeJobAttackFlags: CallReducerFlags = 'FullUpdate';
  initializeJobAttack(flags: CallReducerFlags) {
    this.initializeJobAttackFlags = flags;
  }

  initializeJobPassiveFlags: CallReducerFlags = 'FullUpdate';
  initializeJobPassive(flags: CallReducerFlags) {
    this.initializeJobPassiveFlags = flags;
  }

  initializeTeleportsFlags: CallReducerFlags = 'FullUpdate';
  initializeTeleports(flags: CallReducerFlags) {
    this.initializeTeleportsFlags = flags;
  }

  instakillPlayerFlags: CallReducerFlags = 'FullUpdate';
  instakillPlayer(flags: CallReducerFlags) {
    this.instakillPlayerFlags = flags;
  }

  inviteToPartyFlags: CallReducerFlags = 'FullUpdate';
  inviteToParty(flags: CallReducerFlags) {
    this.inviteToPartyFlags = flags;
  }

  leavePartyFlags: CallReducerFlags = 'FullUpdate';
  leaveParty(flags: CallReducerFlags) {
    this.leavePartyFlags = flags;
  }

  playerTakeDamageFlags: CallReducerFlags = 'FullUpdate';
  playerTakeDamage(flags: CallReducerFlags) {
    this.playerTakeDamageFlags = flags;
  }

  populateBossFlags: CallReducerFlags = 'FullUpdate';
  populateBoss(flags: CallReducerFlags) {
    this.populateBossFlags = flags;
  }

  populateBossTriggersFlags: CallReducerFlags = 'FullUpdate';
  populateBossTriggers(flags: CallReducerFlags) {
    this.populateBossTriggersFlags = flags;
  }

  populateEnemyFlags: CallReducerFlags = 'FullUpdate';
  populateEnemy(flags: CallReducerFlags) {
    this.populateEnemyFlags = flags;
  }

  populatePlayerLevelFlags: CallReducerFlags = 'FullUpdate';
  populatePlayerLevel(flags: CallReducerFlags) {
    this.populatePlayerLevelFlags = flags;
  }

  recoverFromDamageFlags: CallReducerFlags = 'FullUpdate';
  recoverFromDamage(flags: CallReducerFlags) {
    this.recoverFromDamageFlags = flags;
  }

  removeFromPartyFlags: CallReducerFlags = 'FullUpdate';
  removeFromParty(flags: CallReducerFlags) {
    this.removeFromPartyFlags = flags;
  }

  respawnPlayerFlags: CallReducerFlags = 'FullUpdate';
  respawnPlayer(flags: CallReducerFlags) {
    this.respawnPlayerFlags = flags;
  }

  sendPlayerMessageFlags: CallReducerFlags = 'FullUpdate';
  sendPlayerMessage(flags: CallReducerFlags) {
    this.sendPlayerMessageFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

  spawnAllEnemiesFlags: CallReducerFlags = 'FullUpdate';
  spawnAllEnemies(flags: CallReducerFlags) {
    this.spawnAllEnemiesFlags = flags;
  }

  spawnBossFlags: CallReducerFlags = 'FullUpdate';
  spawnBoss(flags: CallReducerFlags) {
    this.spawnBossFlags = flags;
  }

  spawnMissingEnemiesFlags: CallReducerFlags = 'FullUpdate';
  spawnMissingEnemies(flags: CallReducerFlags) {
    this.spawnMissingEnemiesFlags = flags;
  }

  teleportPlayerFlags: CallReducerFlags = 'FullUpdate';
  teleportPlayer(flags: CallReducerFlags) {
    this.teleportPlayerFlags = flags;
  }

  updateBossActionsFlags: CallReducerFlags = 'FullUpdate';
  updateBossActions(flags: CallReducerFlags) {
    this.updateBossActionsFlags = flags;
  }

  updateEnemyPatrolFlags: CallReducerFlags = 'FullUpdate';
  updateEnemyPatrol(flags: CallReducerFlags) {
    this.updateEnemyPatrolFlags = flags;
  }

  updateLeaderboardFlags: CallReducerFlags = 'FullUpdate';
  updateLeaderboard(flags: CallReducerFlags) {
    this.updateLeaderboardFlags = flags;
  }

  updatePartyNameFlags: CallReducerFlags = 'FullUpdate';
  updatePartyName(flags: CallReducerFlags) {
    this.updatePartyNameFlags = flags;
  }

  updatePlayerPositionFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerPosition(flags: CallReducerFlags) {
    this.updatePlayerPositionFlags = flags;
  }

  updatePlayerStateFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerState(flags: CallReducerFlags) {
    this.updatePlayerStateFlags = flags;
  }

  updatePlayerTypingFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerTyping(flags: CallReducerFlags) {
    this.updatePlayerTypingFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get boss(): BossTableHandle {
    return new BossTableHandle(this.connection.clientCache.getOrCreateTable<Boss>(REMOTE_MODULE.tables.Boss));
  }

  get bossAttack(): BossAttackTableHandle {
    return new BossAttackTableHandle(this.connection.clientCache.getOrCreateTable<BossAttack>(REMOTE_MODULE.tables.BossAttack));
  }

  get bossAttackState(): BossAttackStateTableHandle {
    return new BossAttackStateTableHandle(this.connection.clientCache.getOrCreateTable<BossAttackState>(REMOTE_MODULE.tables.BossAttackState));
  }

  get bossRoute(): BossRouteTableHandle {
    return new BossRouteTableHandle(this.connection.clientCache.getOrCreateTable<BossRoute>(REMOTE_MODULE.tables.BossRoute));
  }

  get bossTrigger(): BossTriggerTableHandle {
    return new BossTriggerTableHandle(this.connection.clientCache.getOrCreateTable<BossTrigger>(REMOTE_MODULE.tables.BossTrigger));
  }

  get broadcast(): BroadcastTableHandle {
    return new BroadcastTableHandle(this.connection.clientCache.getOrCreateTable<Broadcast>(REMOTE_MODULE.tables.Broadcast));
  }

  get enemy(): EnemyTableHandle {
    return new EnemyTableHandle(this.connection.clientCache.getOrCreateTable<Enemy>(REMOTE_MODULE.tables.Enemy));
  }

  get enemyDamageEvent(): EnemyDamageEventTableHandle {
    return new EnemyDamageEventTableHandle(this.connection.clientCache.getOrCreateTable<EnemyDamageEvent>(REMOTE_MODULE.tables.EnemyDamageEvent));
  }

  get job(): JobTableHandle {
    return new JobTableHandle(this.connection.clientCache.getOrCreateTable<Job>(REMOTE_MODULE.tables.Job));
  }

  get jobAttack(): JobAttackTableHandle {
    return new JobAttackTableHandle(this.connection.clientCache.getOrCreateTable<JobAttack>(REMOTE_MODULE.tables.JobAttack));
  }

  get jobPassive(): JobPassiveTableHandle {
    return new JobPassiveTableHandle(this.connection.clientCache.getOrCreateTable<JobPassive>(REMOTE_MODULE.tables.JobPassive));
  }

  get leaderboard(): LeaderboardTableHandle {
    return new LeaderboardTableHandle(this.connection.clientCache.getOrCreateTable<Leaderboard>(REMOTE_MODULE.tables.Leaderboard));
  }

  get party(): PartyTableHandle {
    return new PartyTableHandle(this.connection.clientCache.getOrCreateTable<Party>(REMOTE_MODULE.tables.Party));
  }

  get partyInvite(): PartyInviteTableHandle {
    return new PartyInviteTableHandle(this.connection.clientCache.getOrCreateTable<PartyInvite>(REMOTE_MODULE.tables.PartyInvite));
  }

  get partyMember(): PartyMemberTableHandle {
    return new PartyMemberTableHandle(this.connection.clientCache.getOrCreateTable<PartyMember>(REMOTE_MODULE.tables.PartyMember));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.Player));
  }

  get playerDamageEvent(): PlayerDamageEventTableHandle {
    return new PlayerDamageEventTableHandle(this.connection.clientCache.getOrCreateTable<PlayerDamageEvent>(REMOTE_MODULE.tables.PlayerDamageEvent));
  }

  get playerHealEvent(): PlayerHealEventTableHandle {
    return new PlayerHealEventTableHandle(this.connection.clientCache.getOrCreateTable<PlayerHealEvent>(REMOTE_MODULE.tables.PlayerHealEvent));
  }

  get playerJob(): PlayerJobTableHandle {
    return new PlayerJobTableHandle(this.connection.clientCache.getOrCreateTable<PlayerJob>(REMOTE_MODULE.tables.PlayerJob));
  }

  get playerLevel(): PlayerLevelTableHandle {
    return new PlayerLevelTableHandle(this.connection.clientCache.getOrCreateTable<PlayerLevel>(REMOTE_MODULE.tables.PlayerLevel));
  }

  get playerMessage(): PlayerMessageTableHandle {
    return new PlayerMessageTableHandle(this.connection.clientCache.getOrCreateTable<PlayerMessage>(REMOTE_MODULE.tables.PlayerMessage));
  }

  get playerTeleport(): PlayerTeleportTableHandle {
    return new PlayerTeleportTableHandle(this.connection.clientCache.getOrCreateTable<PlayerTeleport>(REMOTE_MODULE.tables.PlayerTeleport));
  }

  get spawn(): SpawnTableHandle {
    return new SpawnTableHandle(this.connection.clientCache.getOrCreateTable<Spawn>(REMOTE_MODULE.tables.Spawn));
  }

  get spawnRoute(): SpawnRouteTableHandle {
    return new SpawnRouteTableHandle(this.connection.clientCache.getOrCreateTable<SpawnRoute>(REMOTE_MODULE.tables.SpawnRoute));
  }

  get teleport(): TeleportTableHandle {
    return new TeleportTableHandle(this.connection.clientCache.getOrCreateTable<Teleport>(REMOTE_MODULE.tables.Teleport));
  }

  get bossActionTimer(): BossActionTimerTableHandle {
    return new BossActionTimerTableHandle(this.connection.clientCache.getOrCreateTable<BossActionTimer>(REMOTE_MODULE.tables.boss_action_timer));
  }

  get broadcastCleanupTimer(): BroadcastCleanupTimerTableHandle {
    return new BroadcastCleanupTimerTableHandle(this.connection.clientCache.getOrCreateTable<BroadcastCleanupTimer>(REMOTE_MODULE.tables.broadcast_cleanup_timer));
  }

  get cleanupDeadBodiesTimer(): CleanupDeadBodiesTimerTableHandle {
    return new CleanupDeadBodiesTimerTableHandle(this.connection.clientCache.getOrCreateTable<CleanupDeadBodiesTimer>(REMOTE_MODULE.tables.cleanup_dead_bodies_timer));
  }

  get combatTimeoutTimer(): CombatTimeoutTimerTableHandle {
    return new CombatTimeoutTimerTableHandle(this.connection.clientCache.getOrCreateTable<CombatTimeoutTimer>(REMOTE_MODULE.tables.combat_timeout_timer));
  }

  get enemyPatrolTimer(): EnemyPatrolTimerTableHandle {
    return new EnemyPatrolTimerTableHandle(this.connection.clientCache.getOrCreateTable<EnemyPatrolTimer>(REMOTE_MODULE.tables.enemy_patrol_timer));
  }

  get leaderboardUpdateTimer(): LeaderboardUpdateTimerTableHandle {
    return new LeaderboardUpdateTimerTableHandle(this.connection.clientCache.getOrCreateTable<LeaderboardUpdateTimer>(REMOTE_MODULE.tables.leaderboard_update_timer));
  }

  get messageCleanupTimer(): MessageCleanupTimerTableHandle {
    return new MessageCleanupTimerTableHandle(this.connection.clientCache.getOrCreateTable<MessageCleanupTimer>(REMOTE_MODULE.tables.message_cleanup_timer));
  }

  get partyInviteCleanupTimer(): PartyInviteCleanupTimerTableHandle {
    return new PartyInviteCleanupTimerTableHandle(this.connection.clientCache.getOrCreateTable<PartyInviteCleanupTimer>(REMOTE_MODULE.tables.party_invite_cleanup_timer));
  }

  get spawnEnemiesTimer(): SpawnEnemiesTimerTableHandle {
    return new SpawnEnemiesTimerTableHandle(this.connection.clientCache.getOrCreateTable<SpawnEnemiesTimer>(REMOTE_MODULE.tables.spawn_enemies_timer));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
